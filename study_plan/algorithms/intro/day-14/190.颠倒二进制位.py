#
# @lc app=leetcode.cn id=190 lang=python3
#
# [190] 颠倒二进制位
#
# https://leetcode-cn.com/problems/reverse-bits/description/
#
# algorithms
# Easy (70.23%)
# Likes:    484
# Dislikes: 0
# Total Accepted:    146.1K
# Total Submissions: 208K
# Testcase Example:  '00000010100101000001111010011100'
#
# 颠倒给定的 32 位无符号整数的二进制位。
#
# 提示：
#
#
# 请注意，在某些语言（如
# Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
# 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数
# -1073741825。
#
#
#
#
# 示例 1：
#
#
# 输入：n = 00000010100101000001111010011100
# 输出：964176192 (00111001011110000010100101000000)
# 解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
# ⁠    因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
#
# 示例 2：
#
#
# 输入：n = 11111111111111111111111111111101
# 输出：3221225471 (10111111111111111111111111111111)
# 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
# ⁠    因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
#
#
#
# 提示：
#
#
# 输入是一个长度为 32 的二进制字符串
#
#
#
#
# 进阶: 如果多次调用这个函数，你将如何优化你的算法？
#
#


# @lc code=start
class Solution:
    GAP_1, GAP_2, GAP_4, GAP_8 = 0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF

    def reverseBits(self, n: int) -> int:
        """ 分治位运算法

        12345678 -> 21 43 65 87 -> 4321 8765 -> 87654321
        """
        n = ((n >> 1) & self.GAP_1) | ((n & self.GAP_1) << 1)
        n = ((n >> 2) & self.GAP_2) | ((n & self.GAP_2) << 2)
        n = ((n >> 4) & self.GAP_4) | ((n & self.GAP_4) << 4)
        n = ((n >> 8) & self.GAP_8) | ((n & self.GAP_8) << 8)
        # Python 内置大整数，位移过程中的所有二进制位都会保留
        # 因此在所有位移动完毕后，n 增长到接近 40 位
        # 使用掩码获取其后 32 位的范围
        return ((n >> 16) | (n << 16)) & 0xFFFFFFFF


# @lc code=end
if __name__ == "__main__":
    s = Solution()
    assert s.reverseBits(43261596) == 964176192
    assert s.reverseBits(4294967293) == 3221225471
