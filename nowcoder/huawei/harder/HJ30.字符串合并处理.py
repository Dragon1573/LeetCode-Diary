""" HJ30 - 字符串合并处理

# 描述

按照指定规则对输入的字符串进行处理：

1. 将输入的两个字符串 str1 和 str2 进行前后合并。

    如给定字符串 "dec" 和字符串 "fab" ， 合并后生成的字符串为 "decfab"

2. 对合并后的字符串进行排序。

    下标为奇数的字符和下标为偶数的字符分别从小到大排序。
    这里的下标的意思是字符在字符串中的位置。注意排序后在新串中仍需要保持原来的奇偶性。
    例如刚刚得到的字符串 "decfab" ，分别对下标为偶数的字符 'd' 、'c' 、'a' 和
    下标为奇数的字符 'e' 、'f' 、'b' 进行排序（生成 'a' 、'c' 、'd' 和 'b' 、'e' 、'f'），
    再依次分别放回原串中的偶数位和奇数位，新字符串变为 "abcedf"

3. 对排序后的字符串中的 '0' ~ '9' 、'A' ~ 'F' 和 'a' ~ 'f' 字符，需要进行转换操作。

    对以上需要进行转换的字符所代表的十六进制用二进制表示并倒序，
    然后再转换成对应的十六进制大写字符（注：字符 a ~ f 的十六进制对应十进制的 10 ~ 15 ，大写同理）。
    如字符 '4' ，其二进制为 0100 ，则翻转后为 0010 ，也就是 2 。
    如字符 '7' ，其二进制为 0111 ，则翻转后为 1110 ，对应的十进制是 14 ，转换为十六进制为 'E'。
    如字符 'C' ，代表的十进制是 12 ，其二进制为 1100 ，则翻转后为 0011 ，也就是 3 。
    根据这个转换规则，由第二步生成的字符串 "abcedf" 转换后会生成字符串 "5D37BF"
"""
from sys import stdin


def convert(raw: str) -> str:
    """ 转换函数 """
    if '0' <= raw <= '9' or 'a' <= raw <= 'f' or 'A' <= raw <= 'F':
        # 获取十六进制数，转换为整数
        result = int(raw, base=16)
        # 转换为二进制字符串
        # 转换时 Python 会忽略前面的 0 ，需要我们补齐
        result = bin(result)[2:].zfill(4)
        # 倒序，重新转换为整数
        result = int(result[::-1], base=2)
        # 转换为十六进制字符串
        return hex(result)[2:].upper()
    else:
        return raw


for line in stdin:
    a, b = map(list, line.strip().split())
    # 步骤一
    result = a + b
    # 步骤二
    result[::2] = sorted(result[::2])
    result[1::2] = sorted(result[1::2])
    # 步骤三
    print(*map(convert, result), sep='')
